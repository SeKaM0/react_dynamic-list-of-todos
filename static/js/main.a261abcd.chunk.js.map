{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","selectedUserId","useState","query","setQuery","sortTodo","setSortTodo","completeStatus","setCompleteStatus","useEffect","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","event","target","value","onClick","map","sort","Math","random","a","b","classNames","checked","userId","API_URL","fetch","response","json","API_USER_URL","user","CurrentUser","id","name","phone","email","setUser","getUser","then","userFromServer","App","setSelectedUserId","setTodo","getTodo","todoFromServer","ReactDOM","render","document","getElementById"],"mappings":"wTAcaA,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,WACAC,EACI,EADJA,eAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAASH,GAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KACA,EAA4CJ,mBAAS,OAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAEAC,qBAAU,WACRH,EAAYP,EAAMW,QAAO,SAAAC,GACvB,OAAQJ,GACN,IAAK,MACH,OAAOI,GAAQA,EAAKC,MAAMC,cAAcC,SAASX,GAEnD,IAAK,WAEH,OAAOQ,EAAKI,WACTJ,EAAKC,MAAMC,cAAcC,SAASX,GAEvC,IAAK,cAEH,OAAQQ,EAAKI,WACVJ,EAAKC,MAAMC,cAAcC,SAASX,GAEvC,QACE,OAAO,SAGZ,CAACJ,EAAOQ,EAAgBJ,IAgB3B,OACE,sBAAKa,UAAU,WAAf,UACE,wCACA,oDAEE,uBAAOC,KAAK,OAAOC,SAfV,SAACC,GACdf,EAASe,EAAMC,OAAOC,QAcmBA,MAAOlB,IAC5C,yBACEkB,MAAOd,EACPW,SAtBiB,SAACC,GACxBX,EAAkBW,EAAMC,OAAOC,QAmB3B,UAIE,wBAAQA,MAAM,MAAd,iBAGA,wBAAQA,MAAM,WAAd,sBAGA,wBAAQA,MAAM,cAAd,+BAMJ,wBAAQJ,KAAK,SAASK,QA5BR,WAChBhB,EAAYD,EAASkB,KAAI,SAAAF,GAAK,MAAK,CAAEA,QAAOG,KAAMC,KAAKC,aACpDF,MAAK,SAACG,EAAGC,GAAJ,OAAUD,EAAEH,KAAOI,EAAEJ,QAC1BD,KAAI,qBAAGF,WAyBR,oBAIA,qBAAKL,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGX,EAASkB,KAAI,SAACZ,GAAD,OACZ,qBAAIK,UACFa,IACE,iBAAkB,CAChB,6BAA8BlB,EAAKI,UACnC,0BAA2BJ,EAAKI,YAJtC,UASE,kCACE,uBAAOE,KAAK,WAAWa,QAASnB,EAAKI,YACrC,4BAAIJ,EAAKC,WAGX,yBACEI,UACEa,IACE,wBAAyB,SAAU,CACjC,kCACAlB,EAAKoB,SAAW9B,IAItBgB,KAAK,SACLK,QAAS,WACPtB,EAAWW,EAAKoB,SAXpB,sBAeGpB,EAAKoB,OAASpB,EAAKoB,OAAS,6B,+BCpHvCC,EAAO,0C,4CAEN,8BAAAL,EAAA,sEACkBM,MAAMD,GADxB,cACCE,EADD,gBAGeA,EAASC,OAHxB,cAGCpC,EAHD,yBAKEA,GALF,4C,kEAQA,WAAuBqC,GAAvB,iBAAAT,EAAA,sEACkBM,MAAMG,GADxB,cACCF,EADD,gBAGcA,EAASC,OAHvB,cAGCE,EAHD,yBAKEA,GALF,4C,sBCFA,IAAMC,EAA+B,SAAC,GAA4B,IAA1BP,EAAyB,EAAzBA,OAAQ/B,EAAiB,EAAjBA,WACrD,EAAwBE,mBAAS,CAC/BqC,GAAIR,EACJS,KAAM,WACNC,MAAO,OACPC,MAAO,aAJT,mBAAOL,EAAP,KAAaM,EAAb,KAgBA,OATAlC,qBAAU,YDNL,SAAP,mCCSImC,CAFkB,kDAA8Cb,IAG7Dc,MAAK,SAACC,GACLH,EAAQG,QAEX,CAACf,IAGF,sBAAKf,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEGe,OAIL,oBAAIf,UAAU,oBAAd,SAAmCqB,EAAKG,OACxC,mBAAGxB,UAAU,qBAAb,SAAmCqB,EAAKK,QACxC,mBAAG1B,UAAU,qBAAb,SAAmCqB,EAAKI,QAExC,wBACExB,KAAK,SACLD,UAAU,SACVM,QAAS,WACPtB,EAAW,IAJf,uBCWS+C,EA3CO,WACpB,MAGI7C,mBAAS,GAHb,mBACED,EADF,KAEE+C,EAFF,KAKA,EAAyB9C,mBAAiB,IAA1C,mBAAOH,EAAP,KAAckD,EAAd,KAEAxC,qBAAU,YFZL,WAAP,gCEaIyC,GACGL,MAAK,SAACM,GACLF,EAAQE,QAEX,IAEH,IAAMnD,EAAa,SAAC+B,GAClBiB,EAAkBjB,IAGpB,OACE,sBAAKf,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEjB,MAAOA,EACPC,WAAYA,EACZC,eAAgBA,MAIpB,qBAAKe,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGf,EACC,cAAC,EAAD,CACE8B,OAAQ9B,EACRD,WAAYA,IAEZ,2BCxCdoD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a261abcd.chunk.js","sourcesContent":["import React, {\n  ChangeEvent,\n  useEffect,\n  useState,\n} from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos:Todo[],\n  selectUser: (x:number) => void,\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [sortTodo, setSortTodo] = useState(todos);\n  const [completeStatus, setCompleteStatus] = useState('All');\n\n  useEffect(() => {\n    setSortTodo(todos.filter(todo => {\n      switch (completeStatus) {\n        case 'All':\n          return todo && todo.title.toLowerCase().includes(query);\n\n        case 'Complete':\n\n          return todo.completed\n          && todo.title.toLowerCase().includes(query);\n\n        case 'notComplete':\n\n          return !todo.completed\n          && todo.title.toLowerCase().includes(query);\n\n        default:\n          return 0;\n      }\n    }));\n  }, [todos, completeStatus, query]);\n\n  const filterByComplete = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setCompleteStatus(event.target.value);\n  };\n\n  const search = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const randomize = () => {\n    setSortTodo(sortTodo.map(value => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label>\n        Filter by name:\n        <input type=\"text\" onChange={search} value={query} />\n        <select\n          value={completeStatus}\n          onChange={filterByComplete}\n        >\n          <option value=\"All\">\n            All\n          </option>\n          <option value=\"Complete\">\n            Complete\n          </option>\n          <option value=\"notComplete\">\n            notComplete\n          </option>\n        </select>\n      </label>\n\n      <button type=\"button\" onClick={randomize}>\n        Random\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {sortTodo.map((todo) => (\n            <li className={\n              classNames(\n                'TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )\n            }\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={\n                  classNames(\n                    'TodoList__user-button', 'button', {\n                      'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                    },\n                  )\n                }\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId ? todo.userId : 'undefined'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport async function getTodo(): Promise<Todo[]> {\n  const response = await fetch(API_URL);\n\n  const todos = await response.json();\n\n  return todos;\n}\n\nexport async function getUser(API_USER_URL:string) {\n  const response = await fetch(API_USER_URL);\n\n  const user = await response.json();\n\n  return user;\n}\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\n type Props = {\n   userId: number,\n   selectUser: (x:number) => void\n };\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [user, setUser] = useState({\n    id: userId,\n    name: 'Anonymus',\n    phone: '7777',\n    email: 'Anonymus',\n  });\n\n  useEffect(() => {\n    const API_USER_URL = `https://mate.academy/students-api/users/${userId}`;\n\n    getUser(API_USER_URL)\n      .then((userFromServer) => {\n        setUser(userFromServer);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {userId}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => {\n          selectUser(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodo } from './api/api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodo] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodo()\n      .then((todoFromServer) => {\n        setTodo(todoFromServer);\n      });\n  }, []);\n\n  const selectUser = (userId:number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}